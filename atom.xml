<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>evilcos的博客</title>
  <icon>lelia.club/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="lelia.club/"/>
  <updated>2020-08-04T07:12:50.968Z</updated>
  <id>lelia.club/</id>
  
  <author>
    <name>evilcos</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UX | 如何编写交互文档</title>
    <link href="lelia.club/2020/08/03/Design%20Requirement%20Document/"/>
    <id>lelia.club/2020/08/03/Design%20Requirement%20Document/</id>
    <published>2020-08-03T13:17:02.387Z</published>
    <updated>2020-08-04T07:12:50.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是交互文档？"><a href="#什么是交互文档？" class="headerlink" title="什么是交互文档？"></a>什么是交互文档？</h2><p>交互文档，即交互设计说明文档。英文 ”Design Requirement Document“，缩写<code>&quot;DRD&quot;</code> 。用来承载<code>设计方案</code>、<code>交互原型</code>、<code>交互说明</code>等内容，存档并交互项目相关伙伴的团队协作文档。</p><h2 id="为什么需要交互文档？"><a href="#为什么需要交互文档？" class="headerlink" title="为什么需要交互文档？"></a>为什么需要交互文档？</h2><p>你也许会说：“产品经理就可输出DRD，无需交互设计师。”但其实，许多交互设计师也可承担产品经理的角色…说白了，岗位名称不过是对工作职责的划分而已，是公司或部门提高专业性和工作效率已达到公司目标的一种方式。</p><p>交互设计师的作用是<code>“对接上下游，承上启下”</code>，无论是在方案审评的讲解，还是日常的工作沟通，都应具备优秀的语言表达和DRD表达能力。</p><p>而DRD不仅能完美阐释产品内容和设计思路，还利于设计规范与统一，让产品保持一致性，在项目各方协调工作中起到重要作用，也方便后期进行项目总结。</p><p>因此，DRD是利于团队协作的媒介，也是产品规范与项目总结的重要输出物。</p><h2 id="有谁在看交互文档？"><a href="#有谁在看交互文档？" class="headerlink" title="有谁在看交互文档？"></a>有谁在看交互文档？</h2><p><strong>业务方/需求方</strong>：包括产品经理/运营经理，这里大多指产品经理。</p><p>Ta们会通过DRD关注你的设计方案是否满足业务和用户需求。交互设计师与Ta们讨论产品规划及业务需求后，结合用户需求，分解关键因素，最终归纳出设计需求。而DRD正是整个设计思路的阐述媒介。</p><p><strong>视觉设计师</strong>：这里包括视觉UI设计师，包括动画设计师。</p><p>Ta们需要知道产品定位是怎样的？有哪些页面要设计？页面间的跳转是怎样的？各页面各元素包括什么状态？遇到特殊情况（数据加载、网络异常、极端情况）如何设计？</p><p><strong>开发人员</strong>：包括IOS、Android、H5、Web等前端开发工程师和后端工程师。</p><p>Ta们需从DRD知道，产品要实现多少功能？多少页面？如何去实现？页面间是怎么跳转的？异常情况怎么处理？…然后用代码将其实现出来。</p><p><strong>测试人员</strong>：包括测试工程师和参与测试的其他人。</p><p>Ta们需要参考DRD梳理测试用例，测试用例须覆盖所有功能、使用场景、操作行为、产品细节，需保证上线无bug，或是少bug状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;什么是交互文档？&quot;&gt;&lt;a href=&quot;#什么是交互文档？&quot; class=&quot;headerlink&quot; title=&quot;什么是交互文档？&quot;&gt;&lt;/a&gt;什么是交互文档？&lt;/h2&gt;&lt;p&gt;交互文档，即交互设计说明文档。英文 ”Design Requirement
        
      
    
    </summary>
    
    
    
      <category term="UX" scheme="lelia.club/tags/UX/"/>
    
  </entry>
  
  <entry>
    <title>Telegram-Name-Updating 报时bot</title>
    <link href="lelia.club/2020/07/29/Telegram-bot/"/>
    <id>lelia.club/2020/07/29/Telegram-bot/</id>
    <published>2020-07-29T02:44:00.000Z</published>
    <updated>2020-08-04T05:32:12.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><hr><p>运行环境：VPS, Python, Python3-pip<br>创建应用：<a href="https://my.telegram.org/">进入官网</a> 只要填APP title和short name即可。获取 api_id 和  api_hash</p><h2 id="2-下载Demo小程序到VPS上"><a href="#2-下载Demo小程序到VPS上" class="headerlink" title="2.下载Demo小程序到VPS上"></a>2.下载Demo小程序到VPS上</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/xyou365/Telegram-Name-Updating.git</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Telegram-Name-Updating</span><br></pre></td></tr></table></figure><h2 id="3-安装telethon"><a href="#3-安装telethon" class="headerlink" title="3.安装telethon"></a>3.安装telethon</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="4-运行Demo小程序"><a href="#4-运行Demo小程序" class="headerlink" title="4.运行Demo小程序"></a>4.运行Demo小程序</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 tg_username_update.py</span><br></pre></td></tr></table></figure><h2 id="5-api认证和用户登录"><a href="#5-api认证和用户登录" class="headerlink" title="5.api认证和用户登录"></a>5.api认证和用户登录</h2><hr><p>根据提示输入api_id和api_hash。接着输入手机号和验证码，如果账号开启了二次验证，根据提示再输入二次验证的密码。最后看到 It works！表明成功了。默认的是每秒30按照一定概率更新一次lastname到特定模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;1-准备&quot;&gt;&lt;a href=&quot;#1-准备&quot; class=&quot;headerlink&quot; title=&quot;1.准备&quot;&gt;&lt;/a&gt;1.准备&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;运行环境：VPS, Python, Python3-pip&lt;br&gt;创建应用：&lt;a
        
      
    
    </summary>
    
    
    
      <category term="Telegram" scheme="lelia.club/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>simpread-人形自走 bot PagerMaid-Modify 的食用笔记</title>
    <link href="lelia.club/2020/07/29/Telegram-bot(PagerMaid)/"/>
    <id>lelia.club/2020/07/29/Telegram-bot(PagerMaid)/</id>
    <published>2020-07-29T02:38:50.000Z</published>
    <updated>2020-08-04T06:27:10.594Z</updated>
    
    <content type="html"><![CDATA[<p>申请Telegram api<br><a href="https://i.loli.net/2020/06/20/3C5h1ZmTNoncWxv.png"><img src="https://i.loli.net/2020/06/20/3C5h1ZmTNoncWxv.png"></a></p><p><a href="https://i.loli.net/2020/06/20/LoI2jFgVM5PqxSh.png"><img src="https://i.loli.net/2020/06/20/LoI2jFgVM5PqxSh.png"></a></p><ol><li><a href="https://core.telegram.org/api">api 申请链接</a></li><li>Creating an application</li><li>API development tools</li><li>填写表格</li></ol><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">apt-get</span> <span class="string">install</span> <span class="string">git</span> <span class="string">neofetch</span> <span class="string">tesseract-ocr</span> <span class="string">libtesseract-dev</span> <span class="string">tesseract-ocr-all</span> <span class="string">libzbar-dev</span> <span class="string">imagemagick</span> <span class="string">figlet</span> <span class="string">ffmpeg</span> <span class="string">python3-pip</span> <span class="string">redis-server</span> <span class="string">-y</span></span><br></pre></td></tr></table></figure><h2 id="把代码拉到小鸡上"><a href="#把代码拉到小鸡上" class="headerlink" title="把代码拉到小鸡上"></a>把代码拉到小鸡上</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="string">/var/lib/pagermaid</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">/var/lib/pagermaid</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/xtaodada/PagerMaid-Modify.git</span></span><br></pre></td></tr></table></figure><h2 id="安装-python-的依赖"><a href="#安装-python-的依赖" class="headerlink" title="安装 python 的依赖"></a>安装 python 的依赖</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">PagerMaid-Modify</span> <span class="string">&amp;&amp;</span> <span class="string">pip3</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.txt</span> <span class="string">&amp;&amp;</span> <span class="string">pip3</span> <span class="string">install</span> <span class="string">pyocr</span> <span class="string">dateparser</span></span><br></pre></td></tr></table></figure><h2 id="配置-bot"><a href="#配置-bot" class="headerlink" title="配置 bot"></a>配置 bot</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cp</span> <span class="string">config.gen.yml</span> <span class="string">config.yml</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/ID_HERE/申请到的apiID/g&quot;</span> <span class="string">config.yml</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/HASH_HERE/申请到的apiHash/g&quot;</span> <span class="string">config.yml</span></span><br></pre></td></tr></table></figure><h2 id="运行一下-bot"><a href="#运行一下-bot" class="headerlink" title="运行一下 bot"></a>运行一下 bot</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">python3</span> <span class="string">-m</span> <span class="string">pagermaid</span></span><br></pre></td></tr></table></figure><h3 id="输入注册-telegram-的手机号和验证码。开了两步验证的话还有个密码要输-······，完事后按-Ctrl-c-结束运行。"><a href="#输入注册-telegram-的手机号和验证码。开了两步验证的话还有个密码要输-······，完事后按-Ctrl-c-结束运行。" class="headerlink" title="输入注册 telegram 的手机号和验证码。开了两步验证的话还有个密码要输 ······，完事后按 Ctrl + c 结束运行。"></a>输入注册 telegram 的手机号和验证码。开了两步验证的话还有个密码要输 ······，完事后按 Ctrl + c 结束运行。</h3><h2 id="加个进程守护"><a href="#加个进程守护" class="headerlink" title="加个进程守护"></a>加个进程守护</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">/etc/systemd/system/pagermaid.service</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line">[<span class="string">Unit</span>]</span><br><span class="line"><span class="string">Description=PagerMaid-Modify</span> <span class="string">telegram</span> <span class="string">utility</span> <span class="string">daemon</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"></span><br><span class="line">[<span class="string">Install</span>]</span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"></span><br><span class="line">[<span class="string">Service</span>]</span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string">WorkingDirectory=/var/lib/pagermaid/PagerMaid-Modify</span></span><br><span class="line"><span class="string">ExecStart=/usr/bin/python3</span> <span class="string">-m</span> <span class="string">pagermaid</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="启动-bot"><a href="#启动-bot" class="headerlink" title="启动 bot"></a>启动 bot</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">systemctl</span> <span class="string">daemon-reload</span> <span class="string">&amp;&amp;</span> <span class="string">systemctl</span> <span class="string">start</span> <span class="string">pagermaid</span> <span class="string">&amp;&amp;</span> <span class="string">systemctl</span> <span class="string">enable</span> <span class="string">pagermaid</span></span><br></pre></td></tr></table></figure><p>好力，弄完了可以开始愉快的玩耍了</p><ul><li>感谢大佬 @xtaodada</li><li><a href="https://t.me/PagerMaid_Modify">PagerMaid-Modify</a> 的 telegram 频道</li><li><a href="https://github.com/xtaodada/PagerMaid-Modify">Github 项目地址</a></li><li><a href="https://github.com/xtaodada/PagerMaid-Modify/wiki">官方安装 wiki</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;申请Telegram api&lt;br&gt;&lt;a href=&quot;https://i.loli.net/2020/06/20/3C5h1ZmTNoncWxv.png&quot;&gt;&lt;img
        
      
    
    </summary>
    
    
    
      <category term="Telegram" scheme="lelia.club/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>Quantumult X 资源解析器以及正则表达式 - 无需 API 即可在本地过滤节点</title>
    <link href="lelia.club/2020/07/26/quantumult-x/"/>
    <id>lelia.club/2020/07/26/quantumult-x/</id>
    <published>2020-07-26T15:30:07.000Z</published>
    <updated>2020-08-04T05:56:02.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每日一问"><a href="#每日一问" class="headerlink" title="每日一问"></a>每日一问</h2><p>还在用 API 过滤节点吗？醒醒吧，本地<strong>资源解析器</strong>它不香吗？</p><h2 id="隐忧"><a href="#隐忧" class="headerlink" title="隐忧"></a>隐忧</h2><p>如大家所知，并不是每个人都能自建<strong>订阅转换 API</strong>，但用第三方的 API 多少会有隐私顾虑（纯粹拼人品）；</p><h2 id="资源解析器"><a href="#资源解析器" class="headerlink" title="资源解析器"></a>资源解析器</h2><p>版本 Quantumult X (v1.0.8-build253) 后，作者引入了资源解析器；相比于常见的在线 API，资源解析器的最大优势：</p><ol><li>完全本地解析，无暴露服务器风险；  </li><li>无需 URLencode 步骤，直接填入原始订阅链接即可，更可直接使用中文参数 (空格除外)；  </li><li>将各类服务器订阅解析成 Quantumult X 格式  </li><li>支持 V2RayN/SSR/SS/Trojan/QuanX/Surge/https 订阅  </li><li>超多个性化参数</li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><img src="https://limbopro.xyz/usr/uploads/2020/06/80007269.png"></p><ol><li>在 Quantumult X 配置文件中**<code>[general]</code>** 部分，加入：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">general</span>]</span><br><span class="line"><span class="string">resource_parser_url=https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js</span></span><br></pre></td></tr></table></figure><p>2.[节点]-[引用（订阅）] 左滑任意订阅 [编辑] 或右上角 [+] 新增订阅时，选择开启 [资源解析器]；</p><p><img src="https://limbopro.xyz/usr/uploads/2020/06/763121157.png"></p><ol start="3"><li><p>开启 [资源解析器]；</p></li><li><p>在订阅链接后加入<strong>解析参数</strong>，如本示例中的 <code>#in=香港</code>：过滤出所有香港节点；</p></li></ol><p><img src="https://limbopro.xyz/usr/uploads/2020/06/2733131739.png"></p><h3 id="其他参数说明"><a href="#其他参数说明" class="headerlink" title="其他参数说明"></a>其他参数说明</h3><ul><li>注意看第 4 点；</li></ul><p>1.) 原始订阅链接后加 “#” , 不同参数用 “&amp;” 连接:<br>你的订阅地址 #in = 香港 + 台湾 &amp; emoji=1&amp;tfo=1</p><p>2.)”节点” 订阅 ➠ 参数说明:<br>info=1, 开启通知提示机场 ✈️ 流量信息（如有）;<br>emoji=1,2 或 -1, 为添加 / 删除节点名中的地区 emoji 旗帜<br>国行设备请用 emoji=2</p><p>3.)udp=1, tfo=1, tls13=1, 分别开启 udp-relay/fast-open/tls13;<br>此参数对源类型为 QuanX/Surge 的链接无效<br>cert=0, 强制 “tls-verification=false” 跳过证书验证;<br>延迟测试只有第一个数据时, 可尝试此参数</p><p>4.)<strong>in, out, 分别为 保留 / 删除 节点</strong>, 多参数用 “+” 连接 (逻辑 “或”), 逻辑 “与” 用 “.” 连接, 可直接用中文, 空格用 “%20” 代替; 如 “in = 香港. IPLC.04 + 台湾 &amp; out = 香港 %20BGP”</p><p>5.)rename 重命名、删除字段, “旧名 @新名”, “删除字段☠️”, 以及 “前缀 @”, “@后缀”, 用 “+” 连接多个参数;<br>如 “rename = 香港 @HK+[SS]@+@[1X]+ 倍率☠️”</p><p>6.)sort=1, -1, 排序参数, 分别根据节点名 正序 / 逆序 排列;</p><p>via <a href="https://github.com/KOP-XIAO/QuantumultX/blob/master/Scripts/resource-parser.js">https://github.com/KOP-XIAO/QuantumultX/blob/master/Scripts/resource-parser.js</a></p><h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>有 bug 请反馈 <a href="https://t.me/Shawn_KOP_bot">@Shawn_KOP_bot</a><br>更新请关注 tg 频道 <a href="https://t.me/QuanX_API">https://t.me/QuanX_API</a><br>Github 对应仓库 <a href="https://github.com/KOP-XIAO/QuantumultX">https://github.com/KOP-XIAO/QuantumultX</a></p><h2 id="进阶玩法"><a href="#进阶玩法" class="headerlink" title="进阶玩法"></a>进阶玩法</h2><p>节点过滤出来了？然后呢？生成策略组，届时只需在 [分流]-[引用] - 某某某 分流的 [策略偏好] 选<strong>该策略组</strong>即可；</p><h3 id="使用-as-policy-参数配合资源解析器生成策略"><a href="#使用-as-policy-参数配合资源解析器生成策略" class="headerlink" title="使用 as-policy 参数配合资源解析器生成策略"></a>使用 as-policy 参数配合资源解析器生成策略</h3><p>由于该方法不灵活，已弃用；</p><p>本高阶玩法<strong>特别适合经常观看 Netflix 的同学</strong>，因为 Netflix 的一些政策：他们在观看 Netflix 的时候需要固定使用某个地域的节点，例如<code>香港</code>，例如<code>新加坡</code>；</p><p>现在在 [server_remote] 配置项中使用 <strong>as-policy=static</strong> 参数，即可将<strong>订阅节点列表</strong>转换成<strong>策略组</strong>，例如我将<strong>某机场节点中包含新加坡的节点过滤出来</strong>并<strong>自动生成名为新加坡的策略组</strong>（名称跟随 tag），届时只需在 [分流]-[引用] - Netflix 分流的[策略偏好] 选<strong>该策略组</strong>即可；</p><p><strong>详细步骤</strong></p><p>1.[配置文件]-[编辑] 找到 [server_remote] 配置项；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">server_remote</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">你的订阅地址#in=新加坡&amp;out=专线,</span> <span class="string">tag=新加坡,</span> <span class="string">as-policy=static,</span> <span class="string">img-url=https://raw.githubusercontent.com/limbopro/Zure/master/IconSet/Netflix_Letter.png,</span> <span class="string">update-interval=86400,</span> <span class="string">opt-parser=true,</span> <span class="string">enabled=true</span></span><br></pre></td></tr></table></figure><p><img src="https://limbopro.xyz/usr/uploads/2020/06/3010142252.png"></p><p><strong>[server_remote] 配置项中的 参数说明：</strong></p><p><code>as-policy=static</code>，将节点作为策略组；<br><code>img-url=</code>，设置策略组图标，后面跟图标地址；<br><code>update-interval=</code>，节点订阅更新周期；<br><code>opt-parser=</code>，是否开启资源解析器；<br><code>enabled=</code>，启用或禁用该节点订阅；</p><h3 id="使用-QuantumultX-内置-regex-参数以及正则表达式筛选节点并生成策略"><a href="#使用-QuantumultX-内置-regex-参数以及正则表达式筛选节点并生成策略" class="headerlink" title="使用 QuantumultX 内置 regex 参数以及正则表达式筛选节点并生成策略"></a>使用 QuantumultX 内置 regex 参数以及正则表达式筛选节点并生成策略</h3><p>效果与 <code>as-policy</code> 雷同，<strong>将需要的节点过滤出来并生成策略组</strong>（<strong>策略组</strong>即包含<code>节点</code>/<code>direct</code>/<code>proxy</code>/<code>reject</code>/ 等一系列其他策略的<strong>混搭嵌套组合</strong>），届时只需在 [分流]-[引用] - Netflix 分流的[策略偏好] 选<strong>该策略组</strong>即可；更友好更灵活，且支持<strong>策略组排序</strong>；</p><h4 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h4><p>打开 Quantumult X - [配置文件]-[编辑] ，找到 [policy] - ，参考如下写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">policy</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">static=Netflix,</span> <span class="string">resource-tag-regex=(次元)|(MDSS),</span> <span class="string">server-tag-regex=(新加坡)|(狮城),</span> <span class="string">img-url=https://raw.githubusercontent.com/limbopro/Zure/master/IconSet/Netflix_Letter.png</span></span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong>（Quantumult X 最新版本）</p><p><code>resource-tag-regex=</code>，<code>=</code>号后面跟<strong>正则表达式</strong>，即使用正则从你所有的<strong>订阅链接的标签</strong>中筛选<strong>符合条件的订阅链接</strong>；</p><p><img src="https://limbopro.xyz/usr/uploads/2020/06/3598901048.png"></p><p>如需筛选多个订阅链接，可使用<code>|</code>：resource-tag-regex = 次元 | MDSS</p><p><code>server-tag-regex=</code>，<code>=</code>号后面跟<strong>正则表达式</strong>，即从上面已经筛选出来的订阅链接里再筛选出你想要的节点；</p><p><img src="https://limbopro.xyz/usr/uploads/2020/06/1297046818.png"></p><p>你的机场订阅肯定包含了很多很多节点，使用正则从中筛选出想要的节点；<br>如需筛选多个名称的节点，可使用<code>|</code>：server-tag-regex = 新加坡 | 香港</p><p>上述例子中，即从我所有的<strong>订阅链接</strong>中筛选出<strong>标签</strong>中含有<code>次元</code>的订阅链接，然后再从<code>次元</code>的节点中筛选出包含<code>新加坡</code>的节点；</p><p><strong>常用正则表达筛选公式：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">(A).*(B)</span>        <span class="string">节点名既有</span> <span class="string">A又有</span> <span class="string">B</span></span><br><span class="line"><span class="string">(A)|(B)</span>         <span class="string">节点名有</span> <span class="string">A</span> <span class="string">或者</span> <span class="string">B</span>  </span><br><span class="line"><span class="string">^((?!A).)*$</span>     <span class="string">节点名不含有</span> <span class="string">A</span></span><br><span class="line"><span class="string">(?!.*(A)).*(B)</span>  <span class="string">节点名不含有</span> <span class="string">A，同时含有</span> <span class="string">B</span></span><br></pre></td></tr></table></figure><p><strong>正则表达式其他语法可参考</strong>：<a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式 - 语法</a>；<br><strong>正则表达式 30 分钟入门教程</strong>：<a href="https://deerchao.cn/tutorials/regex/regex.htm">正则表达式 30 分钟入门教程</a>；</p><p><strong>理解正则表达式：</strong>正则表达式到底是什么东西？</p><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p>很可能你使用过 Windows/Dos 下用于文件查找的通配符 (wildcard)，也就是<em>和?。如果你想查找某个目录下的所有的 Word 文档的话，你会搜索</em>.doc。在这里，* 会被解释成任意的字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以 0 开头，后面跟着 2-3 个数字，然后是一个连字号 “-”，最后是 7 或 8 位数字的字符串 (像 010-12345678 或 0376-7654321)。</p><p>via <a href="https://deerchao.cn/tutorials/regex/regex.htm">正则表达式 30 分钟入门教程</a>;</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p><code>img-url=</code> 后面的图标可以使用抠图仔的 github 项目：<a href="https://github.com/Koolson/Qure">https://github.com/Koolson/Qure</a>；</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>感谢 Shawn <a href="https://github.com/KOP-XIAO/QuantumultX">https://github.com/KOP-XIAO/QuantumultX</a><br>感谢 抠图仔 <a href="https://github.com/Koolson/Qure">https://github.com/Koolson/Qure</a><br>感谢 Quantumult X <a href="https://t.me/QuanXApp">https://t.me/QuanXApp</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;每日一问&quot;&gt;&lt;a href=&quot;#每日一问&quot; class=&quot;headerlink&quot; title=&quot;每日一问&quot;&gt;&lt;/a&gt;每日一问&lt;/h2&gt;&lt;p&gt;还在用 API 过滤节点吗？醒醒吧，本地&lt;strong&gt;资源解析器&lt;/strong&gt;它不香吗？&lt;/p&gt;
&lt;h2
        
      
    
    </summary>
    
    
    
      <category term="Quantumult X" scheme="lelia.club/tags/Quantumult-X/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="lelia.club/2020/07/22/markdown/"/>
    <id>lelia.club/2020/07/22/markdown/</id>
    <published>2020-07-22T08:59:27.000Z</published>
    <updated>2020-08-03T08:48:41.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a><a href="#1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" title="1. 基本语法"></a>1. 基本语法</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="#%E4%BB%A3%E7%A0%81" title="代码"></a>代码</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">单个回车【这里有一个回车符-&gt;】</span></span><br><span class="line"><span class="string">视为空格。</span></span><br><span class="line"><span class="string">连续回车【这里有两个回车符-&gt;】</span></span><br><span class="line"></span><br><span class="line"><span class="string">视为分段。</span></span><br><span class="line"><span class="string">行尾加两个空格【这里有两个空格和一个回车符-&gt;】</span>  </span><br><span class="line"><span class="string">即可段内换行。</span></span><br><span class="line"><span class="string">*这是斜体*</span></span><br><span class="line"><span class="string">**这是粗体**</span></span><br><span class="line"><span class="string">\为转义字符</span> <span class="string">【这是一个斜杠</span> <span class="string">\\</span> <span class="string">】</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a><a href="#%E6%95%88%E6%9E%9C" title="效果"></a>效果</h3><p>单个回车【这里有一个回车符 -&gt;】<br>视为空格。<br>连续回车【这里有两个回车符 -&gt;】</p><p>视为分段。<br>行尾加两个空格【这里有两个空格和一个回车符 -&gt;】<br>即可段内换行。<br><em>这是斜体</em><br><strong>这是粗体</strong><br>\ 为转义字符【这是一个 \】</p><hr><h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a><a href="#2-%E6%A0%87%E9%A2%98" title="2. 标题"></a>2. 标题</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><a href="#%E4%BB%A3%E7%A0%81-1" title="代码"></a>代码</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br><span class="line"><span class="string">在行下面加</span> <span class="string">=</span> <span class="string">表示大标题</span></span><br><span class="line"><span class="string">在行下面加</span> <span class="bullet">-</span> <span class="string">表示小标题</span></span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a><a href="#%E6%95%88%E6%9E%9C-1" title="效果"></a>效果</h3><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a><a href="#%E8%BF%99%E6%98%AF%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a><a href="#%E8%BF%99%E6%98%AF%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a><a href="#%E8%BF%99%E6%98%AF%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a><a href="#%E8%BF%99%E6%98%AF%E4%BA%94%E7%BA%A7%E6%A0%87%E9%A2%98" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a><a href="#%E8%BF%99%E6%98%AF%E5%85%AD%E7%BA%A7%E6%A0%87%E9%A2%98" title="这是六级标题"></a>这是六级标题</h6><h2 id="在行下面加-表示小标题"><a href="#在行下面加-表示小标题" class="headerlink" title="在行下面加 - 表示小标题"></a>在行下面加 - 表示小标题</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a><a href="#%E8%AF%B4%E6%98%8E" title="说明"></a>说明</h3><p>在行首添加 1 到 6 个 # ，表示 1 到 6 级标题。 Markdown 共有 6 级标题。在文字行下面加 = 或者 - 分别表示大标题和小标题。</p><hr><h2 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a><a href="#3-%E5%88%97%E8%A1%A8" title="3. 列表"></a>3. 列表</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><a href="#%E4%BB%A3%E7%A0%81-2" title="代码"></a>代码</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">无序列表项目1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">无序列表项目2</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">无序列表项目3</span></span><br><span class="line"></span><br><span class="line"><span class="string">两个列表不能相邻，否则会认为是一个列表。</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">有序列表项目1</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">有序列表项目2</span></span><br><span class="line"><span class="number">3</span><span class="string">.</span> <span class="string">有序列表项目3</span></span><br><span class="line"></span><br><span class="line"><span class="string">下面是嵌套列表：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">外层列表项目1</span></span><br><span class="line"><span class="string">+</span> <span class="string">内层列表项目11</span></span><br><span class="line"><span class="string">+</span> <span class="string">内层列表项目12</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">外层列表项目2</span></span><br><span class="line"><span class="string">+</span> <span class="string">内层列表项目21</span></span><br><span class="line"><span class="string">+</span> <span class="string">内层列表项目22</span></span><br></pre></td></tr></table></figure><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a><a href="#%E6%95%88%E6%9E%9C-2" title="效果"></a>效果</h3><ul><li>无序列表项目 1</li><li>无序列表项目 2</li><li>无序列表项目 3</li></ul><p>两个列表不能相邻，否则会认为是一个列表。</p><ol><li>有序列表项目 1</li><li>有序列表项目 2</li><li>有序列表项目 3</li></ol><p>下面是嵌套列表：</p><ul><li>外层列表项目 1<ul><li>内层列表项目 11</li><li>内层列表项目 12</li></ul></li><li>外层列表项目 2<ul><li>内层列表项目 21</li><li>内层列表项目 22</li></ul></li></ul><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a><a href="#%E8%AF%B4%E6%98%8E-1" title="说明"></a>说明</h3><p>注意，两个列表不能相邻，否则会认为是一个列表；内层列表项目前需要有缩进。</p><hr><h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a><a href="#4-%E5%88%86%E5%89%B2%E7%BA%BF" title="4. 分割线"></a>4. 分割线</h2><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><a href="#%E4%BB%A3%E7%A0%81-3" title="代码"></a>代码</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">上面是一条分割线</span></span><br></pre></td></tr></table></figure><h3 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a><a href="#%E6%95%88%E6%9E%9C-3" title="效果"></a>效果</h3><hr><p>上面是一条分割线</p><hr><h2 id="5-程序代码"><a href="#5-程序代码" class="headerlink" title="5. 程序代码"></a><a href="#5-%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81" title="5. 程序代码"></a>5. 程序代码</h2><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><a href="#%E4%BB%A3%E7%A0%81-4" title="代码"></a>代码</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Java：</span></span><br><span class="line"></span><br><span class="line">    <span class="string">public</span> <span class="string">class</span> <span class="string">CodeView</span> &#123;</span><br><span class="line">        <span class="string">public</span> <span class="string">static</span> <span class="string">void</span> <span class="string">main(String</span>[] <span class="string">args)</span> &#123;</span><br><span class="line">            <span class="string">System.out.println(&quot;Hello</span> <span class="string">World!&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a><a href="#%E6%95%88%E6%9E%9C-4" title="效果"></a>效果</h3><p>Java：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">CodeView</span> &#123;</span><br><span class="line">    <span class="string">public</span> <span class="string">static</span> <span class="string">void</span> <span class="string">main(String</span>[] <span class="string">args)</span> &#123;</span><br><span class="line">        <span class="string">System.out.println(&quot;Hello</span> <span class="string">World!&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a><a href="#%E8%AF%B4%E6%98%8E-2" title="说明"></a>说明</h3><p>行的开头空 4 个空格或者 tab 符，表示程序代码。</p><hr><h3 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a><a href="#6-%E5%BC%95%E7%94%A8" title="6. 引用"></a>6. 引用</h3><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><a href="#%E4%BB%A3%E7%A0%81-5" title="代码"></a>代码</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;这是引用文字</span></span><br></pre></td></tr></table></figure><h4 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a><a href="#%E6%95%88%E6%9E%9C-5" title="效果"></a>效果</h4><blockquote><p>这是引用文字</p></blockquote><hr><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a><a href="#7-%E5%85%B6%E4%BB%96" title="7. 其他"></a>7. 其他</h2><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><a href="#%E4%BB%A3%E7%A0%81-6" title="代码"></a>代码</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;http://example.com/&gt;</span></span><br><span class="line">[<span class="string">链接文字</span>]<span class="string">(http://example.com/</span> <span class="string">&quot;标题文字&quot;</span><span class="string">)</span></span><br><span class="line"><span class="type">![</span><span class="string">图片文字](/uploads/avatar.jpg</span> <span class="string">&quot;图片文字&quot;</span><span class="string">)</span></span><br></pre></td></tr></table></figure><h3 id="效果-6"><a href="#效果-6" class="headerlink" title="效果"></a><a href="#%E6%95%88%E6%9E%9C-6" title="效果"></a>效果</h3><p><a href="http://example.com/">http://example.com/</a><br><a href="http://www.ituring.com.cn/" title="标题文字">链接文字</a><br><a href="http://zhang-jc.github.io/uploads/avatar.jpg" title="图片文字">![][img-0]</a></p><p><a href="http://zhang-jc.github.io/uploads/avatar.jpg" title="图片文字">图片文字</a></p><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a><a href="#%E8%AF%B4%E6%98%8E-3" title="说明"></a>说明</h3><ul><li>直接显示链接地址，则用 &lt;&gt; 包围链接即可。</li><li>链接要显示的文字放到 [] 中。</li><li>链接地址放到 [] 后紧跟的 () 中。</li><li>要显示链接标题文字（鼠标悬浮时显示的内容）则在链接后加空格，且标题文字放到”” 中。</li><li>图片跟链接一样，只是在最前面加 ! 符号。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;1-基本语法&quot;&gt;&lt;a href=&quot;#1-基本语法&quot; class=&quot;headerlink&quot; title=&quot;1. 基本语法&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95&quot; title=&quot;1.
        
      
    
    </summary>
    
    
    
      <category term="Markdown" scheme="lelia.club/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Debian使用第三方客户端连接SSH</title>
    <link href="lelia.club/2020/07/22/Debian/"/>
    <id>lelia.club/2020/07/22/Debian/</id>
    <published>2020-07-22T08:15:29.000Z</published>
    <updated>2020-08-02T13:51:33.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、修改ssh配置文件并设置root密码"><a href="#一、修改ssh配置文件并设置root密码" class="headerlink" title="一、修改ssh配置文件并设置root密码"></a>一、修改ssh配置文件并设置root密码</h2><h3 id="1-首先使用Google-Cloud-SSH登录VPS"><a href="#1-首先使用Google-Cloud-SSH登录VPS" class="headerlink" title="1.首先使用Google Cloud SSH登录VPS"></a>1.首先使用Google Cloud SSH登录VPS</h3><p><img src="http://gusin.club/post-images/1595406776222.jpg"></p><h3 id="2-切换到root账户"><a href="#2-切换到root账户" class="headerlink" title="2.切换到root账户"></a>2.切换到root账户</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p><img src="http://gusin.club/post-images/1595406275924.jpg"></p><h3 id="3-编辑ssh配置文件"><a href="#3-编辑ssh配置文件" class="headerlink" title="3.编辑ssh配置文件"></a>3.编辑ssh配置文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h3 id="4-修改以下内容即可"><a href="#4-修改以下内容即可" class="headerlink" title="4.修改以下内容即可"></a>4.修改以下内容即可</h3><p>按按键【i】进入编辑，按【Esc】退出编辑，再输入 :wq 保存并退出</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">找到</span> <span class="string">PermitRootLogin</span> <span class="literal">no</span> <span class="string">这一行，将no修改为</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">找到</span> <span class="string">PasswordAuthentication</span> <span class="literal">no</span> <span class="string">这一行，将no修改为</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>💊可能 PermitRootLogin 后会显示为 prohibit-password 并且#注释掉了，可将注释#去掉将 prohibit-password 换成 yes</p><h3 id="5-重启ssh"><a href="#5-重启ssh" class="headerlink" title="5.重启ssh"></a>5.重启ssh</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><h3 id="6-为root账户设置密码"><a href="#6-为root账户设置密码" class="headerlink" title="6.为root账户设置密码"></a>6.为root账户设置密码</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">passwd</span></span><br></pre></td></tr></table></figure><p>输入密码-确认密码</p><h3 id="设置成功"><a href="#设置成功" class="headerlink" title="设置成功"></a>设置成功</h3><p>看到passwd: all authentication tokens updated successfully.即设置成功。</p><h2 id="🤷‍♂️-FAQ"><a href="#🤷‍♂️-FAQ" class="headerlink" title="🤷‍♂️ FAQ"></a>🤷‍♂️ FAQ</h2><h3 id="PermitRootLogin-参数"><a href="#PermitRootLogin-参数" class="headerlink" title="PermitRootLogin 参数"></a>PermitRootLogin 参数</h3><p>指定 root 是否可以用 ssh 登录。参数值必须是“yes”、“prohibit-password”、“without-password”、“orced-commands-only”或者“no”。默认值是“prohibit-password”。</p><p>如果这个选项设置为“prohibit-password”、“without-password”，通过密码和键盘交互的授权方式对 root 用户禁用。</p><p>如果这个选项设置为“orced-commands-only”，root 用户只允许通过公钥授权登录，但只是指定了 conmmand 选项的时候（这可能对远程备份是有好处的，即使 root 不允许登录）。其他授权方式对 root 无效。</p><p>如果这个选项设置为“no”，root 不允许登录。</p><p>其他参数说明，请查阅<a href="http://man.openbsd.org/sshd_config">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;一、修改ssh配置文件并设置root密码&quot;&gt;&lt;a href=&quot;#一、修改ssh配置文件并设置root密码&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
    
      <category term="vps" scheme="lelia.club/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>Docker | 制作属于自己的 Jenkins 镜像</title>
    <link href="lelia.club/2020/07/20/Docker/"/>
    <id>lelia.club/2020/07/20/Docker/</id>
    <published>2020-07-20T09:17:42.000Z</published>
    <updated>2020-08-04T07:24:28.108Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们可能需要为了满足自己的需求来制作自己的 Docker 镜像。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近我在使用 Docker 搭建 Jenkins 自动化构建平台时遇到了各种环境问题，例如在 Jenkins 官方的镜像内是没有 maven、Android SDK、npm 等环境的，自然也就没法使用 Jenkins 来构建编译我们的项目，这里有三种解决办法：</p><h5 id="1-直接进入到-Jenkins-容器内部安装相关环境。"><a href="#1-直接进入到-Jenkins-容器内部安装相关环境。" class="headerlink" title="1. 直接进入到 Jenkins 容器内部安装相关环境。"></a>1. 直接进入到 Jenkins 容器内部安装相关环境。</h5><p>需要注意的是，安装相关相关环境后要确保容器不能被删除，容易一旦被删除，那么里面所做的变更都消失了，所以不推荐。</p><h5 id="2-在宿主机上安装相关环境，然后通过-Docker-挂载卷的形式映射到容器内部。"><a href="#2-在宿主机上安装相关环境，然后通过-Docker-挂载卷的形式映射到容器内部。" class="headerlink" title="2. 在宿主机上安装相关环境，然后通过 Docker 挂载卷的形式映射到容器内部。"></a>2. 在宿主机上安装相关环境，然后通过 Docker 挂载卷的形式映射到容器内部。</h5><p>这种方式如果宿主机有相关环境是非常方便的，可以直接环境的位置以挂载卷的形式映射到容器内部让容器能访问到宿主机的环境，但缺点也很明显，如果需要将 Jenkins 迁移到其他服务器上，那么这些环境是没法迁移的，需要到迁移的服务器上再安装一遍的，所以综上两种方式有了下面的第三种方式。</p><h5 id="3-将相关环境直接打包进-Jenkins-镜像中。"><a href="#3-将相关环境直接打包进-Jenkins-镜像中。" class="headerlink" title="3. 将相关环境直接打包进 Jenkins 镜像中。"></a>3. 将相关环境直接打包进 Jenkins 镜像中。</h5><p>这种方式需要我们在官方 Jenkins 镜像的基础上定制属于我们自己的 Jenkins 镜像，和第一种方式一样，环境是安装在容器内部的，但是不同的是容器若被删除，下次重新创建容器的时候环境都是还在的，因为环境安装在 Image 镜像内部的。所以迁移也很方便，只需要把制作好的镜像上传到 DockerHub 上，然后其他服务器需要使用的话只需要将镜像拉取下来即可。</p><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><p>下面就来一步一步制作我们的 Jenkins 镜像，分别演示将 Maven、Android SDK、Node.js 环境打包到镜像中。</p><h4 id="编写-Dockerfile-文件"><a href="#编写-Dockerfile-文件" class="headerlink" title="编写 Dockerfile 文件"></a>编写 Dockerfile 文件</h4><p>首先创建我们的 Dockerfile 文件，然后编写。</p><ol><li><h5 id="选定基础镜像"><a href="#选定基础镜像" class="headerlink" title="选定基础镜像"></a>选定基础镜像</h5><p>这里我们使用 Jenkins 官方提供的 Jenkins 镜像作为基础镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">jenkins/jenkins:lts</span></span><br></pre></td></tr></table></figure></li><li><h5 id="安装必要的辅助工具"><a href="#安装必要的辅助工具" class="headerlink" title="安装必要的辅助工具"></a>安装必要的辅助工具</h5><p>因为后面涉及到 zip 压缩包下载、解压操作，所以我们需要先安装 <code>curl</code>、<code>unzip</code> 命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; echo Y | apt-get install curl \</span><br><span class="line">    &amp;&amp; apt-get install unzip</span><br></pre></td></tr></table></figure></li><li><h5 id="安装-Maven-环境"><a href="#安装-Maven-环境" class="headerlink" title="安装 Maven 环境"></a>安装 Maven 环境</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ARG MAVEN_URL=<span class="string">&quot;http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip&quot;</span></span><br><span class="line">ARG USER_LOCAL=<span class="string">&quot;/usr/local&quot;</span></span><br><span class="line">ENV MAVEN_HOME=<span class="string">&quot;$USER_LOCAL/maven&quot;</span></span><br><span class="line"></span><br><span class="line">RUN cd $MAVEN_HOME \</span><br><span class="line">    &amp;&amp; curl -o maven.zip $MAVEN_URL \</span><br><span class="line">    &amp;&amp; unzip maven.zip \</span><br><span class="line">    &amp;&amp; rm maven.zip</span><br></pre></td></tr></table></figure><ul><li><code>ARG</code>：用于定义常量，仅在当前 Dockerfile 有效。</li><li><code>ENV</code>：也是定于常量，当时在构建镜像时，会作为环境变量打到镜像内部。</li><li><code>curl -o</code> ：下载文件。</li></ul></li><li><h5 id="安装-Android-SDK-环境"><a href="#安装-Android-SDK-环境" class="headerlink" title="安装 Android SDK 环境"></a>安装 Android SDK 环境</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ARG</span> <span class="string">USER_LOCAL=&quot;/usr/local&quot;</span></span><br><span class="line"><span class="string">ARG</span> <span class="string">SDK_MANAGER_URL=&quot;https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip&quot;</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">ANDROID_HOME=&quot;$USER_LOCAL/Android/sdk&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">cd</span> <span class="string">$ANDROID_HOME</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">curl</span> <span class="string">-o</span> <span class="string">sdk.zip</span> <span class="string">$SDK_MANAGER_URL</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">unzip</span> <span class="string">sdk.zip</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">rm</span> <span class="string">sdk.zip</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">tools</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">Y</span> <span class="string">|</span> <span class="string">$ANDROID_HOME/tools/bin/sdkmanager</span> <span class="string">&quot;extras;android;m2repository&quot;</span> <span class="string">&quot;platform-tools&quot;</span> <span class="string">&quot;platforms;android-28&quot;</span> <span class="string">&quot;build-tools;28.0.3&quot;</span> <span class="string">&quot;cmake;3.10.2.4988404&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>echo Y</code>：因为有些操作需要用户输入 Y/n 确认，所以这句的意思是代替用户输入 Y。</li></ul><p>这里我们使用 Andoird 提供的命令行工具 sdkmanager 去安装 sdk，这里我们安装了 android-28、build-tools 28.0.3 版本，以及 cmake。</p><p>可以使用 <code>sdkmanager list</code> 可以查看所有可安装的环境。</p><p>详细的 sdkmanager 使用可以查看<a href="https://developer.android.com/studio/command-line/sdkmanager">官方文档</a>。</p></li><li><h5 id="安装-Node-js-环境"><a href="#安装-Node-js-环境" class="headerlink" title="安装 Node.js 环境"></a>安装 Node.js 环境</h5><p>安装 Node.js 的命令是通过 apt 来安装的，详见<a href="https://github.com/nodesource/distributions/blob/master/README.md">官方文档</a>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">RUN</span> <span class="string">curl</span> <span class="string">-sL</span> <span class="string">https://deb.nodesource.com/setup_11.x</span> <span class="string">|</span> <span class="string">bash</span> <span class="bullet">-</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">nodejs</span></span><br></pre></td></tr></table></figure></li><li><h5 id="将各环境添加到系统环境变量中"><a href="#将各环境添加到系统环境变量中" class="headerlink" title="将各环境添加到系统环境变量中"></a>将各环境添加到系统环境变量中</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ENV</span> <span class="string">PATH</span> <span class="string">$MAVEN_HOME/apache-maven-3.6.3/bin:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmake/3.10.2.4988404/bin:$PATH</span></span><br></pre></td></tr></table></figure></li><li><h5 id="最后做一些清理操作"><a href="#最后做一些清理操作" class="headerlink" title="最后做一些清理操作"></a>最后做一些清理操作</h5><p>尽量在镜像中不要放一些冗余的无用文件，所以需要做一些清理操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">RUN</span> <span class="string">apt-get</span> <span class="string">clean</span></span><br></pre></td></tr></table></figure></li><li><h5 id="完整的-Dockerfile-文件"><a href="#完整的-Dockerfile-文件" class="headerlink" title="完整的 Dockerfile 文件"></a>完整的 Dockerfile 文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">jenkins/jenkins:lts</span></span><br><span class="line"><span class="string">USER</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="string">ARG</span> <span class="string">USER_LOCAL=&quot;/usr/local&quot;</span></span><br><span class="line"><span class="string">ARG</span> <span class="string">SDK_MANAGER_URL=&quot;https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip&quot;</span></span><br><span class="line"><span class="string">ARG</span> <span class="string">MAVEN_URL=&quot;http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip&quot;</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">ANDROID_HOME=&quot;$USER_LOCAL/Android/sdk&quot;</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">MAVEN_HOME=&quot;$USER_LOCAL/maven&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">$ANDROID_HOME</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">$MAVEN_HOME</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">apt-get</span> <span class="string">update</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">Y</span> <span class="string">|</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">curl</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">unzip</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">$MAVEN_HOME</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">curl</span> <span class="string">-o</span> <span class="string">maven.zip</span> <span class="string">$MAVEN_URL</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">unzip</span> <span class="string">maven.zip</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">rm</span> <span class="string">maven.zip</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">$ANDROID_HOME</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">curl</span> <span class="string">-o</span> <span class="string">sdk.zip</span> <span class="string">$SDK_MANAGER_URL</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">unzip</span> <span class="string">sdk.zip</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">rm</span> <span class="string">sdk.zip</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">tools</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">Y</span> <span class="string">|</span> <span class="string">$ANDROID_HOME/tools/bin/sdkmanager</span> <span class="string">&quot;extras;android;m2repository&quot;</span> <span class="string">&quot;platform-tools&quot;</span> <span class="string">&quot;platforms;android-28&quot;</span> <span class="string">&quot;build-tools;28.0.3&quot;</span> <span class="string">&quot;cmake;3.10.2.4988404&quot;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">curl</span> <span class="string">-sL</span> <span class="string">https://deb.nodesource.com/setup_11.x</span> <span class="string">|</span> <span class="string">bash</span> <span class="bullet">-</span> <span class="string">\</span></span><br><span class="line">    <span class="string">&amp;&amp;</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">nodejs</span></span><br><span class="line"></span><br><span class="line"><span class="string">ENV</span> <span class="string">PATH</span> <span class="string">$MAVEN_HOME/apache-maven-3.6.3/bin:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmake/3.10.2.4988404/bin:$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">apt-get</span> <span class="string">clean</span></span><br></pre></td></tr></table></figure><blockquote><p>Docker 镜像分层存储结构，层数是有限制的，Dockerfile 中每个命令将作为一层，所以尽量将可放在一起一些操作放在一个命令内，例如上面不必写很多 <code>RUN</code>，将命令放在一起会更好，了解更多写法可参考<a href="https://yeasy.gitbooks.io/docker_practice/image/build.html">这里</a>。</p></blockquote></li></ol><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">my_jenkins</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><ul><li><code>-t</code>：指定镜像名。</li></ul><blockquote><p>最后的 . 不要忘记，用于指定<a href="https://yeasy.gitbooks.io/docker_practice/image/build.html">构建上下文环境</a>，如果 Dockerfile 文件没有问题，那么构建应该是没有问题的，其中安装 Android SDK 可能需要耗时一点。</p></blockquote><h2 id="上传镜像到-DockerHub"><a href="#上传镜像到-DockerHub" class="headerlink" title="上传镜像到 DockerHub"></a>上传镜像到 DockerHub</h2><ol><li><h5 id="注册-DockerHub-账号"><a href="#注册-DockerHub-账号" class="headerlink" title="注册 DockerHub 账号"></a>注册 DockerHub 账号</h5><p>想要上传镜像到 <a href="https://hub.docker.com/">DockerHub</a> 需要提前注册一个账号。</p></li><li><h5 id="在本地登录-DockerHub-账号"><a href="#在本地登录-DockerHub-账号" class="headerlink" title="在本地登录 DockerHub 账号"></a>在本地登录 DockerHub 账号</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">login</span></span><br></pre></td></tr></table></figure><p>可使用上面的命令按照提示登入你的账号</p></li><li><h5 id="推送刚刚构建的镜像"><a href="#推送刚刚构建的镜像" class="headerlink" title="推送刚刚构建的镜像"></a>推送刚刚构建的镜像</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">tag</span> <span class="string">my_jenkins</span> <span class="string">imhanjie/my_jenkins</span></span><br><span class="line"><span class="string">docker</span> <span class="string">push</span> <span class="string">my_jenkins</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，在 <code>push</code> 之前，肯定是要推送到自己的仓库，所以根据镜像名称的规则，需要在镜像前面加上你自己的 DockerHub 的用户名，这样才会推送到你的仓库下，指定用户名的形式就是 <code>your_username/image_name</code> ，我的 DockerHub 名字是 <code>imhanjie</code> ，所以首先根据本地的 <code>my_jenkis</code> 镜像添加一个 tag，名称为 <code>imhanjie/my_jenkins</code> ，然后 <code>push</code> 就可以了，最后就可以在 DockerHub 上看见自己刚刚推送的镜像了。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://yeasy.gitbooks.io/docker_practice/">Docker — 从入门到实践</a></li><li><a href="https://developer.android.com/studio/command-line/sdkmanager">sdkmanager</a></li><li><a href="https://github.com/nodesource/distributions/blob/master/README.md">NodeSource Node.js Binary Distributions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;有时候我们可能需要为了满足自己的需求来制作自己的 Docker 镜像。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近我在使用 Docker 搭建 Jenkins
        
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="lelia.club/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Telegram收发QQ消息</title>
    <link href="lelia.club/2020/07/19/telegram-qq/"/>
    <id>lelia.club/2020/07/19/telegram-qq/</id>
    <published>2020-07-19T08:02:37.000Z</published>
    <updated>2020-08-04T06:28:21.091Z</updated>
    
    <content type="html"><![CDATA[<p>使用<a href="https://github.com/blueset/ehForwarderBot">EFB</a>, <a href="https://github.com/blueset/efb-telegram-master">ETM</a>, <a href="https://github.com/blueset/efb-wechat-slave">EWS</a>和systemd守护进程，支持 Ubuntu &gt;= 18.04 &amp; Debian &gt;= 10</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><hr><p>建议先使用 <code># apt update &amp;&amp; apt upgrade -y</code>更新所有软件包</p><h2 id="二进制依赖"><a href="#二进制依赖" class="headerlink" title="二进制依赖"></a>二进制依赖</h2><p><code># apt install -y python3-pip python3-wheel ffmpeg libmagic1 libwebp6</code></p><h2 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h2><p><code># pip3 install ehforwarderbot efb-telegram-master efb-qq-slave</code></p><h2 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h2><hr><p><code># mkdir -p /etc/ehforwarderbot/profiles/qq/&#123;blueset.telegram,milkice.qq&#125;</code></p><h2 id="EFB"><a href="#EFB" class="headerlink" title="EFB"></a>EFB</h2><p>创建<code>/etc/ehforwarderbot/profiles/qq/config/yaml</code>,写入以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master_channel: blueset.telegram</span><br><span class="line">slave_channels:</span><br><span class="line">- blueset.qq</span><br></pre></td></tr></table></figure><h2 id="ETM"><a href="#ETM" class="headerlink" title="ETM"></a>ETM</h2><p>创建 <a href="https://blog.1a23.com/2017/01/09/EFB-How-to-Send-and-Receive-Messages-from-WeChat-on-Telegram-zh-CN/#0x030-%E5%88%9B%E5%BB%BA-Telegram-Bot">Telegram Bot</a></p><h2 id="建立设定档"><a href="#建立设定档" class="headerlink" title="建立设定档"></a>建立设定档</h2><p>创建<code>/etc/ehfotwarderbot/profiles/qq/blueset/telegram/config.yaml</code>,写入以下内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">token: <span class="string">&quot;Token&quot;</span></span><br><span class="line"># 将 Token 替换为在上一步获得的 Token</span><br><span class="line">admins:</span><br><span class="line">- ID</span><br><span class="line"># 将 ID 替换为在上一步获得的 Telegram ID</span><br></pre></td></tr></table></figure><h2 id="EQS"><a href="#EQS" class="headerlink" title="EQS"></a>EQS</h2><p><a href="https://github.com/milkice233/efb-qq-slave/blob/master/doc/CoolQ_zh-CN.rst#%E6%96%B9%E6%A1%88%E4%BA%8C%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE---%E9%85%8D%E7%BD%AE-%E9%85%B7q-%E7%AB%AF%E7%AF%87">CoolQ Client</a></p><h2 id="主体-1"><a href="#主体-1" class="headerlink" title="主体"></a>主体</h2><p>创建<code>/etc/ehforwarderbot/profiles/qq/milkice.qq/config.yaml</code>,写入以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Client: CoolQ</span><br><span class="line">CoolQ:</span><br><span class="line">  type: HTTP</span><br><span class="line">  access_token: ac0f790e1fb74ebcaf45da77a6f9de47</span><br><span class="line">  api_root: http:<span class="comment">//127.0.0.1:5700/</span></span><br><span class="line">  host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  port: <span class="number">8000</span></span><br><span class="line">  is_pro: false # 若使用 CoolQ Pro 則爲 true</span><br><span class="line">  air_option:</span><br><span class="line">    upload_to_smms: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="systemd守护进程"><a href="#systemd守护进程" class="headerlink" title="systemd守护进程"></a>systemd守护进程</h2><p>创建<code>etc/systemd/system/efb@.service</code>,写入以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=EFB instance <span class="keyword">for</span> profile %i</span><br><span class="line">Documentation=https:<span class="comment">//github.com/blueset/ehForwarderBot</span></span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">ExecStart=<span class="regexp">/usr/</span>bin/python3 -m ehforwarderbot -p %i</span><br><span class="line">Environment=EFB_DATA_PATH=<span class="regexp">/etc/</span>ehforwarderbot LANG=zh_CN.UTF<span class="number">-8</span></span><br><span class="line">TimeoutStopSec=<span class="number">10</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><hr><p><code># systemctl start efb@qq</code><br>设定为开机自启动: <code># systemctl enable efb@qq</code></p><h2 id="在docker上部署"><a href="#在docker上部署" class="headerlink" title="在docker上部署"></a>在docker上部署</h2><hr><p>push代码<code>$ wget https://github.com/YHNdnzj/efb-docker/raw/master/docker-compose.yml</code><br>将其中的 ehForwarderBot 替换为自己的密码，ACCOUNT 替换为QQ账号<br><code># docker-compose up -d</code><br>打开<IP>:90000,使用设定的密码登入 VNC 并登入 QQ 账号</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;使用&lt;a href=&quot;https://github.com/blueset/ehForwarderBot&quot;&gt;EFB&lt;/a&gt;, &lt;a href=&quot;https://github.com/blueset/efb-telegram-master&quot;&gt;ETM&lt;/a&gt;, &lt;a
        
      
    
    </summary>
    
    
    
      <category term="Telegram" scheme="lelia.club/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>使用Telegram收发微信消息</title>
    <link href="lelia.club/2020/07/19/telegram-wechat/"/>
    <id>lelia.club/2020/07/19/telegram-wechat/</id>
    <published>2020-07-19T07:25:04.000Z</published>
    <updated>2020-08-04T06:34:30.337Z</updated>
    
    <content type="html"><![CDATA[<p>使用<a href="https://github.com/blueset/ehForwarderBot">EFB</a>, <a href="https://github.com/blueset/efb-telegram-master">ETM</a>, <a href="https://github.com/blueset/efb-wechat-slave">EWS</a>和systemd守护进程，支持 Ubuntu &gt;= 18.04 &amp; Debian &gt;= 10<br>(使用 EWS 有 微信网页版被封的危险，请谨慎使用)</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><hr><p>建议先使用 <code># apt update &amp;&amp; apt upgrade -y</code>更新所有软件包</p><h2 id="二进制依赖"><a href="#二进制依赖" class="headerlink" title="二进制依赖"></a>二进制依赖</h2><p><code># apt install -y python3-pip python3-wheel ffmpeg libmagic1 libwebp6</code></p><h2 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h2><p><code># pip3 install ehforwarderbot efb-telegram-master efb-wechat-slave</code></p><h2 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h2><hr><p><code># mkdir -p /etc/ehforwarderbot/profiles/wechat/blueset.telegram</code></p><h2 id="EFB"><a href="#EFB" class="headerlink" title="EFB"></a>EFB</h2><p>创建<code>/etc/ehforwarderbot/profiles/wechat/config.yaml</code>,写入以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master_channel: blueset.telegram</span><br><span class="line">slave_channels:</span><br><span class="line">- blueset.wechat</span><br></pre></td></tr></table></figure><h2 id="ETM"><a href="#ETM" class="headerlink" title="ETM"></a>ETM</h2><p>创建 <a href="https://blog.1a23.com/2017/01/09/EFB-How-to-Send-and-Receive-Messages-from-WeChat-on-Telegram-zh-CN/#0x030-%E5%88%9B%E5%BB%BA-Telegram-Bot">Telegram Bot</a></p><h2 id="建立设定档"><a href="#建立设定档" class="headerlink" title="建立设定档"></a>建立设定档</h2><p>创建<code>/etc/ehforwarderbot/profiles/wechat/blueset.telegram/config.yaml</code>,写入以下内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">token: <span class="string">&quot;Token&quot;</span></span><br><span class="line"># 将 Token 替换为在上一步获得的 Token</span><br><span class="line">admins:</span><br><span class="line">- ID</span><br><span class="line"># 将 ID 替换为在上一步获得的 Telegram ID</span><br></pre></td></tr></table></figure><h2 id="systemd-守护进程"><a href="#systemd-守护进程" class="headerlink" title="systemd 守护进程"></a>systemd 守护进程</h2><p>创建 <code>/etc/systemd/system/efb@.service</code>,写入以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=EFB instance <span class="keyword">for</span> profile %i</span><br><span class="line">Documentation=https:<span class="comment">//github.com/blueset/ehForwarderBot</span></span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">ExecStart=<span class="regexp">/usr/</span>bin/python3 -m ehforwarderbot -p %i</span><br><span class="line">Environment=EFB_DATA_PATH=<span class="regexp">/etc/</span>ehforwarderbot LANG=zh_CN.UTF<span class="number">-8</span></span><br><span class="line">TimeoutStopSec=<span class="number">10</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><hr><p><code>#systemctl start efb@wechat</code><br>使用<code>$ journalctl -u efb@wechat -e</code>查看输出，扫码登录<br>设定为开机自启动：<code># systemctl enable efb@wechat</code></p><h2 id="使用docker部署"><a href="#使用docker部署" class="headerlink" title="使用docker部署"></a>使用docker部署</h2><hr><p>push代码   <code># curl -fsSL https://github.com/YHNdnzj/efb-docker/raw/master/init.sh | bash</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker run -d -e EFB_PROFILE=wechat --name efb-wechat -v /etc/ehforwarderbot:/etc/ehforwarderbot yhndnzj/efb</span><br><span class="line"></span><br><span class="line"># docker logs -f efb-wechat</span><br></pre></td></tr></table></figure><h2 id="Debian-Docker-安装"><a href="#Debian-Docker-安装" class="headerlink" title="Debian Docker 安装"></a>Debian Docker 安装</h2><h3 id="使用官方安装脚本自动安装"><a href="#使用官方安装脚本自动安装" class="headerlink" title="使用官方安装脚本自动安装"></a>使用官方安装脚本自动安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="comment">//get.docker.com | bash -s docker --mirror Aliyun</span></span><br></pre></td></tr></table></figure><h3 id="也可以使用国内-daocloud-一键安装命令："><a href="#也可以使用国内-daocloud-一键安装命令：" class="headerlink" title="也可以使用国内 daocloud 一键安装命令："></a>也可以使用国内 daocloud 一键安装命令：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https:<span class="comment">//get.daocloud.io/docker | sh</span></span><br></pre></td></tr></table></figure><h2 id="docker-compase"><a href="#docker-compase" class="headerlink" title="docker-compase"></a>docker-compase</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;使用&lt;a href=&quot;https://github.com/blueset/ehForwarderBot&quot;&gt;EFB&lt;/a&gt;, &lt;a href=&quot;https://github.com/blueset/efb-telegram-master&quot;&gt;ETM&lt;/a&gt;, &lt;a
        
      
    
    </summary>
    
    
    
      <category term="Telegram" scheme="lelia.club/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>小白编写签到脚本</title>
    <link href="lelia.club/2020/07/16/check/"/>
    <id>lelia.club/2020/07/16/check/</id>
    <published>2020-07-16T06:19:44.000Z</published>
    <updated>2020-07-30T08:27:02.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于如何自己编写签到脚本"><a href="#关于如何自己编写签到脚本" class="headerlink" title="关于如何自己编写签到脚本"></a>关于如何自己编写签到脚本</h2><h2 id="GET方法篇-豆瓣时间为例子"><a href="#GET方法篇-豆瓣时间为例子" class="headerlink" title="GET方法篇(豆瓣时间为例子)"></a>GET方法篇(豆瓣时间为例子)</h2><h2 id="第一步-对我们要实现自动签到的App抓包"><a href="#第一步-对我们要实现自动签到的App抓包" class="headerlink" title="第一步,对我们要实现自动签到的App抓包"></a>第一步,对我们要实现自动签到的App抓包</h2><p>推荐使用Thor进行抓包和数据分析,没有的话也可以使用Qx or Surge<br>大致的抓包流程如下<br><img src="http://gusin.club/post-images/1594955066280.gif" alt="图片描述-w150"><br>删除未完成的请求以及一些图片,有一条check_in的记录映入你的眼帘,你二话不说就点进去看看这条记录,查看了她的消息体(你就是馋她的身子), 你拿出了多年学习英语的经验,知道Good Good Study,Day Day Up的真理, 一眼看去<code> &quot;has_checked&quot;:true&amp;&quot;auto_check&quot;:&#123;&quot;status&quot;:&quot;success&quot;&#125;</code>,你知道这个脚本有戏了。</p><p>然后放进Anubis这个神奇的App进行重放操作,你知道胜败就在此一举,接下来的脚本能否实现就靠它了-&gt;重放</p><p>于是乎,你查看了重放的结果,果然不出所料。</p><p>1、能够返回数据<br>2、返回数据几乎与手动签到一致,除了部分参数变成了false或者其他<br>3、可以说找到关键的记录是非常的重要的操作<br><img src="http://gusin.club/post-images/1594955104642.gif"></p><p>备注:建议无任何基础者先抓包,找出签到记录(一般记录都会有自己的标识,像上面的这种就比较容易发现)</p><p>然后第二天对记录进行重放操作,如果返回的消息体与手动签到近似度达到95%,则可进行下面的操作！</p><h2 id="第二步-对抓包数据进行分析"><a href="#第二步-对抓包数据进行分析" class="headerlink" title="第二步,对抓包数据进行分析"></a>第二步,对抓包数据进行分析</h2><h3 id="response的数据"><a href="#response的数据" class="headerlink" title="response的数据"></a>response的数据</h3><p><img src="http://gusin.club/post-images/1594952892883.png"><br>可以看到对我们有用的数据在上方已经说明 has_checked&amp;status</p><p>然后再仔细看看可以看到”continuous_check_in_count”: 1,意味着连续签到天数</p><p>在下面的脚本编写的过程中会重点用到这几个数据</p><h3 id="request的数据"><a href="#request的数据" class="headerlink" title="request的数据"></a>request的数据</h3><p><img src="http://gusin.club/post-images/1594952945007.png"></p><p>其中的 host:frodo.douban.com 这个是我们要添加到 MiTM中的主机名</p><p>而链接https://……?在?之前我们是需要将其改写然后添加到复写的(至于为什么是？之前,建议百度 GET和POST请求方式)</p><p>上面的复写就是^https://fro.douban.com/api/v2/niffler/check_in/status</p><p>可以看和原来的<a href="https://fro.douban/com/api/v2/niffler/check_in/status%E5%8C%BA%E5%88%AB%E6%89%80%E5%9C%A8(%E8%BF%99%E9%87%8C%E6%B6%89%E5%8F%8A%E5%88%B0%E6%AD%A3%E5%88%99%E8%AF%AD%E6%B3%95),%E4%BD%86%E6%98%AF%E4%BD%A0%E4%BE%9D%E7%84%B6%E5%8F%AF%E4%BB%A5%E4%B8%8D%E7%94%A8%E7%AE%A1,%E5%A5%97%E6%A8%A1%E7%89%88%E7%94%BB%E8%91%AB%E8%8A%A6%E3%80%82">https://fro.douban\com/api/v2/niffler/check_in/status区别所在(这里涉及到正则语法),但是你依然可以不用管,套模版画葫芦。</a></p><p>所以我们最终就可以得到以下一份复写配置指南：</p><p>[MiTM]</p><p>frodo.douban.com</p><p>[rewrite_local] Qx</p><p>^<a href="https://fro.douban.com/api/v2/niffler/check_in/status">https://fro.douban.com/api/v2/niffler/check_in/status</a> url script-request-header dbsj.cookie.js</p><p>[rewrite_local] Surge</p><p>http-request ^<a href="https://fro.douban.com/api/v2/niffler/check_in/status">https://fro.douban.com/api/v2/niffler/check_in/status</a> script-path=dbsj.cookie.js</p><h2 id="第三步-编写Cookie脚本"><a href="#第三步-编写Cookie脚本" class="headerlink" title="第三步,编写Cookie脚本"></a>第三步,编写Cookie脚本</h2><h3 id="3-1-首先从GitHub上下载-chavyleung库中的脚本-这里用-全民K歌的"><a href="#3-1-首先从GitHub上下载-chavyleung库中的脚本-这里用-全民K歌的" class="headerlink" title="3.1 首先从GitHub上下载@chavyleung库中的脚本(这里用 全民K歌的)"></a>3.1 首先从GitHub上下载<a href="https://github.com/chavyleung/scripts">@chavyleung</a>库中的脚本(这里用 全民K歌的)</h3><p><img src="http://gusin.club/post-images/1594953097061.png"></p><p>我们下载了这三个文件到电脑或者你的手机中,打开将init方法上的名字(全民K歌,qmkg)改掉。</p><p>README.md这个文件我们可以暂时不用管<br><img src="http://gusin.club/post-images/1594953132206.png"></p><p>请看下方注释文本,GET方法我们只需要 url和header</p><p><img src="http://gusin.club/post-images/1594953160792.png"></p><p>激动人心的时候到了,是时候表演真正的技术了,我们将写好的dbsj.cookie.js(注意这里需要改一下文件名)放到本地进行测试,添加MITM&amp;rewrite</p><h2 id="第四步-开启测试"><a href="#第四步-开启测试" class="headerlink" title="第四步,开启测试"></a>第四步,开启测试</h2><p>我们打开Anubis,选中我们刚刚重放的记录,再次对其进行重放操作(相当于模拟手动签到)</p><ul><li>成功:那么你会收到Qx或者Surge的获取Cookie成功的通知</li><li>失败:你不会收到任何通知(<ul><li>这里可能有几种失败的原因,你的复写不正确,你没有进行配置,或者你没有开关软件<h2 id="第五步-编写签到脚本"><a href="#第五步-编写签到脚本" class="headerlink" title="第五步,编写签到脚本"></a>第五步,编写签到脚本</h2>在上一步中,我们已经将init()方法上的参数修改了,这里不再赘述</li></ul></li></ul><p>继续看图中的注释内容<br><img src="http://gusin.club/post-images/1594953268558.png"><br>我们将返回的数据给了result,此时result就相当于我们手动签到和重放返回的消息体中的数据,参考第二步response的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F;这里意味在全名K歌中我们要获取的数据,我们需要对其进行改写</span><br><span class="line">const total &#x3D; result.data[&#39;task.revisionSignInGetAward&#39;].total</span><br><span class="line">const ret &#x3D; result.data[&#39;task.revisionSignInGetAward&#39;].ret</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在豆瓣时间我们确定了对我们有用的数据是 has_checked、continuous_check_in_count以及status</span><br><span class="line">&#x2F;&#x2F;具体参数的意义可以从英文释义了解到     今日是否签到      连续签到天数           自动签到结果</span><br><span class="line">&#x2F;&#x2F;那么我们就用这三个判断               重复签到                             签到成功还是失败</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;下面我们来获取数据,result在第一个&#123;&#125;,而我们要获取has_checked就要 result.today_status进入到第二个&#123;&#125;</span><br><span class="line">&#x2F;&#x2F;然后再result.today_status.has_checked获取到我们想要的数据并赋给 has_checked</span><br><span class="line">const has_checked &#x3D; result.today_status.has_checked</span><br><span class="line">&#x2F;&#x2F;对于连续签到天数,我们这里也加上作为演示</span><br><span class="line">const continuous_check_in_count &#x3D; result.continuous_check_in_count</span><br><span class="line">const status &#x3D; result.auto_check.status</span><br><span class="line">&#x2F;&#x2F;然后我们要开始对我们取到的数据进行判断了</span><br><span class="line">if (status &#x3D;&#x3D; &quot;success&quot;) &#123;</span><br><span class="line">  &#x2F;&#x2F;等于true是因为手动签到的时候 “status”: &quot;success&quot; 你要根据你要编写的脚本具体变化</span><br><span class="line">  &#x2F;&#x2F;举个例子, 在某个脚本中关键的地方是 “checked”: 200   那么你就要判断 chencked &#x3D;&#x3D; 200</span><br><span class="line">  subTitle &#x3D; &#96;签到结果: 成功&#96; &#x2F;&#x2F;这里我们不改动</span><br><span class="line">  &#x2F;&#x2F;对于连续签到天数,我们放在detail中,那么就需要这样写了</span><br><span class="line">  &#x2F;&#x2F;只需要将获取到的数据放在   $&#123;&#125; 当中的大括号即可</span><br><span class="line">  detail &#x3D; &#96;连续签到天数$&#123;continuous_check_in_count&#125;&#96;</span><br><span class="line">&#125; else if(has_checked &#x3D;&#x3D; true) &#123;</span><br><span class="line">  &#x2F;&#x2F;重放(再次签到)返回的结果是 true 所以我们判定他是重复签到</span><br><span class="line">  subTitle &#x3D; &#96;签到结果: 重复&#96;</span><br><span class="line">&#125; else if(has_checked &#x3D;&#x3D; false)&#123;</span><br><span class="line">  &#x2F;&#x2F;这一个判断你可加可不加</span><br><span class="line">  subTitle &#x3D; &#96;签到结果: 失败&#96;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;软件的通知方法</span><br><span class="line">senku.msg(cookieName, subTitle, detail)</span><br><span class="line">senku.done()</span><br></pre></td></tr></table></figure><p>对于小白我们就判断 if 和 else if 成功或者重复的情况,找到关键字例如status对其判断就好</p><p>当然如果你知道那个参数数据是失败的话 那么你就可以用 else if(xxx == xx){subTitle = 签到失败}</p><p>最终我们得到这么一份脚本,init()方法我们不做任何改动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const cookieName &#x3D; &#39;豆瓣时间&#39;</span><br><span class="line">const signurlKey &#x3D; &#39;senku_signurl_dbsj&#39;</span><br><span class="line">const signheaderKey &#x3D; &#39;senku_signheader_dbsj&#39;</span><br><span class="line">const signbodyKey &#x3D; &#39;senku_signbody_dbsj&#39;</span><br><span class="line">const senku &#x3D; init()</span><br><span class="line">const signurlVal &#x3D; senku.getdata(signurlKey)</span><br><span class="line">const signheaderVal &#x3D; senku.getdata(signheaderKey)</span><br><span class="line">sign()</span><br><span class="line">function sign() &#123;</span><br><span class="line">  const url &#x3D; &#123; url: signurlVal, headers: JSON.parse(signheaderVal)&#125;</span><br><span class="line">  senku.get(url, (error, response, data) &#x3D;&gt; &#123;</span><br><span class="line">    const result &#x3D; JSON.parse(data)</span><br><span class="line">    let subTitle &#x3D; &#96;&#96;</span><br><span class="line">    let detail &#x3D; &#96;&#96;</span><br><span class="line">    const status &#x3D; result.auto_check.status</span><br><span class="line">    const has_checked &#x3D; result.today_status.has_checked</span><br><span class="line">    const continuous_check_in_count &#x3D; result.continuous_check_in_count</span><br><span class="line">    if (status &#x3D;&#x3D; &quot;success&quot;) &#123;</span><br><span class="line">      subTitle &#x3D; &#96;签到结果: 成功&#96;</span><br><span class="line">      detail &#x3D; &#96;连续签到天数$&#123;continuous_check_in_count&#125;&#96;</span><br><span class="line">    &#125; else if (has_checked &#x3D;&#x3D; true) &#123;</span><br><span class="line">      subTitle &#x3D; &#96;签到结果: 重复&#96;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (has_checked &#x3D;&#x3D; false) &#123;</span><br><span class="line">      subTitle &#x3D; &#96;签到结果: 失败&#96;</span><br><span class="line">    &#125;</span><br><span class="line">    senku.msg(cookieName, subTitle, detail)</span><br><span class="line">    senku.done()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将脚本放在本地,添加task,然后对其进行手动只需一次,不出意外的话,你会收到软件的通知</p><p>[task_local]</p><p>1 0 * * * dbsj.js</p><h3 id="以上-大概就是我日常用-chavyleung造好的轮子写出来的脚本"><a href="#以上-大概就是我日常用-chavyleung造好的轮子写出来的脚本" class="headerlink" title="以上,大概就是我日常用@chavyleung造好的轮子写出来的脚本"></a>以上,大概就是我日常用<a href="https://github.com/chavyleung/scripts">@chavyleung</a>造好的轮子写出来的脚本</h3><h3 id="同时也欢迎大家自己动手编写-实现仓库的万物皆可签到"><a href="#同时也欢迎大家自己动手编写-实现仓库的万物皆可签到" class="headerlink" title="同时也欢迎大家自己动手编写,实现仓库的万物皆可签到"></a>同时也欢迎大家自己动手编写,实现仓库的万物皆可签到</h3>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;关于如何自己编写签到脚本&quot;&gt;&lt;a href=&quot;#关于如何自己编写签到脚本&quot; class=&quot;headerlink&quot; title=&quot;关于如何自己编写签到脚本&quot;&gt;&lt;/a&gt;关于如何自己编写签到脚本&lt;/h2&gt;&lt;h2 id=&quot;GET方法篇-豆瓣时间为例子&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="Quantumult X" scheme="lelia.club/tags/Quantumult-X/"/>
    
  </entry>
  
  <entry>
    <title>幕布高级版兑换码无限兑换</title>
    <link href="lelia.club/2020/07/15/mu-bu/"/>
    <id>lelia.club/2020/07/15/mu-bu/</id>
    <published>2020-07-15T03:00:40.000Z</published>
    <updated>2020-08-04T07:31:13.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进入幕布官网地址"><a href="#进入幕布官网地址" class="headerlink" title="进入幕布官网地址"></a>进入幕布官网地址</h2><p><a href="https://mubu.com/apps">https://mubu.com/apps</a></p><h2 id="点击续费→使用升级码→随便复制一个-领一个月，然后重复操作"><a href="#点击续费→使用升级码→随便复制一个-领一个月，然后重复操作" class="headerlink" title="点击续费→使用升级码→随便复制一个 领一个月，然后重复操作"></a>点击续费→使用升级码→随便复制一个 领一个月，然后重复操作</h2><h2 id="升级码"><a href="#升级码" class="headerlink" title="升级码"></a>升级码</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1357</span><span class="number">-3192</span><span class="number">-0691</span><span class="number">-2172</span></span><br><span class="line"><span class="number">1574</span><span class="number">-2480</span><span class="number">-0697</span><span class="number">-2758</span></span><br><span class="line"><span class="number">2655</span><span class="number">-6873</span><span class="number">-0544</span><span class="number">-4357</span></span><br><span class="line"><span class="number">2668</span><span class="number">-3983</span><span class="number">-0634</span><span class="number">-8640</span></span><br><span class="line"><span class="number">3018</span><span class="number">-3365</span><span class="number">-0406</span><span class="number">-7069</span></span><br><span class="line"><span class="number">3305</span><span class="number">-7677</span><span class="number">-0649</span><span class="number">-5236</span></span><br><span class="line"><span class="number">5445</span><span class="number">-3804</span><span class="number">-0643</span><span class="number">-5009</span></span><br><span class="line"><span class="number">5546</span><span class="number">-5107</span><span class="number">-0246</span><span class="number">-4145</span></span><br><span class="line"><span class="number">6435</span><span class="number">-7684</span><span class="number">-0945</span><span class="number">-7952</span></span><br><span class="line"><span class="number">6828</span><span class="number">-5611</span><span class="number">-0174</span><span class="number">-5278</span></span><br><span class="line"><span class="number">6853</span><span class="number">-8233</span><span class="number">-0422</span><span class="number">-8588</span></span><br><span class="line"><span class="number">7191</span><span class="number">-5622</span><span class="number">-0728</span><span class="number">-8647</span></span><br><span class="line"><span class="number">9349</span><span class="number">-8930</span><span class="number">-0749</span><span class="number">-1774</span></span><br><span class="line"><span class="number">9642</span><span class="number">-9716</span><span class="number">-0768</span><span class="number">-8881</span></span><br><span class="line"><span class="number">9878</span><span class="number">-8560</span><span class="number">-0725</span><span class="number">-1240</span></span><br><span class="line"><span class="number">7434</span><span class="number">-4489</span><span class="number">-0365</span><span class="number">-1171</span></span><br></pre></td></tr></table></figure><h2 id="或者谷歌浏览器官网网站登录F12打开控制台，输入以下代码后回车，自动刷最后一个1000数字改为你想要刷多少个月。"><a href="#或者谷歌浏览器官网网站登录F12打开控制台，输入以下代码后回车，自动刷最后一个1000数字改为你想要刷多少个月。" class="headerlink" title="或者谷歌浏览器官网网站登录F12打开控制台，输入以下代码后回车，自动刷最后一个1000数字改为你想要刷多少个月。"></a>或者谷歌浏览器官网网站登录F12打开控制台，输入以下代码后回车，自动刷最后一个1000数字改为你想要刷多少个月。</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mubu</span>(<span class="params"></span>)</span>&#123;<span class="keyword">let</span> formdata=<span class="keyword">new</span> FormData();formdata.append(<span class="string">&#x27;code&#x27;</span>,<span class="string">&quot;9642-9716-0768-8881&quot;</span>)</span><br><span class="line">fetch(<span class="string">&quot;https://mubu.com/api/upgrade/use_code&quot;</span>,&#123;<span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,<span class="attr">body</span>:formdata&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;续费成功&#x27;</span>)&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(err)&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(err)&#125;)&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(mubu,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;进入幕布官网地址&quot;&gt;&lt;a href=&quot;#进入幕布官网地址&quot; class=&quot;headerlink&quot; title=&quot;进入幕布官网地址&quot;&gt;&lt;/a&gt;进入幕布官网地址&lt;/h2&gt;&lt;p&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>《计算机是怎么跑起来的》</title>
    <link href="lelia.club/2020/07/15/computer/"/>
    <id>lelia.club/2020/07/15/computer/</id>
    <published>2020-07-15T02:49:02.000Z</published>
    <updated>2020-07-30T08:27:48.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;读后感&quot;&gt;&lt;a href=&quot;#读后感&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AE表达式学习</title>
    <link href="lelia.club/2020/07/15/AE/"/>
    <id>lelia.club/2020/07/15/AE/</id>
    <published>2020-07-15T02:10:21.000Z</published>
    <updated>2020-08-04T07:19:23.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是表达式？"><a href="#什么是表达式？" class="headerlink" title="什么是表达式？"></a>什么是表达式？</h2><hr><p>表达式的本质是通过 <code>设定的条件，计算出的值</code> 。<br>即表达式的条件是自己设定的，写的表达式就是为了设定条件，而最终得到的就是一个 <strong>值</strong><br>值就是操作的所有对象都是通过赋值让它形成我们想要的结果。</p><h2 id="如何使用表达式？"><a href="#如何使用表达式？" class="headerlink" title="如何使用表达式？"></a>如何使用表达式？</h2><hr><h3 id="使用方法及工具"><a href="#使用方法及工具" class="headerlink" title="使用方法及工具"></a>使用方法及工具</h3><ul><li>表达式实际上是要给到某一个具体的合成及某一属性</li><li>对一个属性使用表达式时按住键盘 <code>Alt+鼠标左键 </code> 点击时钟按钮即可激活，此时表达式属性的值变为红色，右边弹出表达式输入的窗口。<img src="http://gusin.club/post-images/1596096114664.jpg"></li><li>对于表达式输入框，可以自定义JS表达式<br><img src="http://gusin.club/post-images/1596097702192.png"><br>1: “=” 表达式生效开关<br>2: 以曲线的方式看表达式（需结合图表编辑器按钮）<br>3: 橡皮筋按钮 使用它可以和其他属性形成关系<br>4: 表达式菜单</li><li><strong>写表达式就是在写关系，不使用表达式时它是一个固定的值，即表达式是一个动态的值-动态地和某个东西有一定的关系</strong><ul><li>如何形成关系？橡皮筋功能就可以形成关系</li><li>可以是某个层的属性和其他属性形成关系，这个属性既可以是其他层，也可以是自己层</li><li>例如：将自己层的透明度、旋转和文本内容的表达式同时激活，文本内容的橡皮筋指向旋转层，旋转层的橡皮筋指向透明度层。此时在透明度表达式的输入框输入值，以上三者将同时变化</li><li>如何成立？</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;什么是表达式？&quot;&gt;&lt;a href=&quot;#什么是表达式？&quot; class=&quot;headerlink&quot; title=&quot;什么是表达式？&quot;&gt;&lt;/a&gt;什么是表达式？&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;表达式的本质是通过 &lt;code&gt;设定的条件，计算出的值&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="AE" scheme="lelia.club/tags/AE/"/>
    
  </entry>
  
  <entry>
    <title>Gridea配置GitHub Page</title>
    <link href="lelia.club/2020/07/14/gridea-github-page/"/>
    <id>lelia.club/2020/07/14/gridea-github-page/</id>
    <published>2020-07-14T06:59:06.000Z</published>
    <updated>2020-08-04T06:54:47.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Create-a-new-repository-创建仓库"><a href="#Create-a-new-repository-创建仓库" class="headerlink" title="Create a new repository 创建仓库"></a>Create a new repository 创建仓库</h2><ol><li>Repository name切记要按照正确的格式输入：<font color="red" size=3 face="宋体"><strong>用户名.github.io</strong></font></li><li>勾选为public公开仓库，勾选Initialize this repository with a README</li><li>勾选create repository<br>此时仓库项目已创建成功<h2 id="设置项目为-GitHub-Page"><a href="#设置项目为-GitHub-Page" class="headerlink" title="设置项目为 GitHub Page"></a>设置项目为 GitHub Page</h2></li><li>点击setting</li><li>将页面滑倒 Github Page处</li><li>在source下将None按钮切换为 master branch</li><li>此时，会出现一串地址 https://你的用户名.github.io 点击访问会出现 README 中描述文字<br>此时GitHub Page创建成功<h2 id="申请-GitHub-Token"><a href="#申请-GitHub-Token" class="headerlink" title="申请 GitHub Token"></a>申请 GitHub Token</h2></li><li>点击右上角个人头像，点击Settings</li><li>找到左边选项栏中最后一栏 Developer settings 进入</li><li>点击 Personal access tokens - Generate new token 开始创建Token</li><li>Note 描述随意填写，第一栏的 repo 勾选后移至页面最底部，点击 Generate token 成功创建</li><li>将生成的 GitHub token 备份，此时的 token 仅会出现一次<h2 id="配置Gridea"><a href="#配置Gridea" class="headerlink" title="配置Gridea"></a>配置Gridea</h2></li><li>进入 Gridea 点击远程-基础配置</li><li>平台选择 GitHub Page</li><li>按照预先设定好的参数进行填写<h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2></li><li>在域名供应商中增加4条DNS设定，类型指向A记录，内容分别为<br> 185.199.108.153<br> 185.199.109.153<br> 185.199.110.153<br> 185.199.111.153</li><li>返回 Gridea 中将域名栏和 CNAME 填写为自己的域名</li><li>点击检测远程连接 - 同步</li><li>配置完成<h2 id="🤷‍♂️-FAQ"><a href="#🤷‍♂️-FAQ" class="headerlink" title="🤷‍♂️ FAQ"></a>🤷‍♂️ FAQ</h2>网页样式显示异常怎么办？<br>这是由于域名设置的时候所选 https 或 http 错误（自定义域名且无证书时填 http），添加后保存，重新同步一下就好了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Create-a-new-repository-创建仓库&quot;&gt;&lt;a href=&quot;#Create-a-new-repository-创建仓库&quot; class=&quot;headerlink&quot; title=&quot;Create a new repository
        
      
    
    </summary>
    
    
    
      <category term="Github" scheme="lelia.club/tags/Github/"/>
    
      <category term="Gridea" scheme="lelia.club/tags/Gridea/"/>
    
  </entry>
  
</feed>
